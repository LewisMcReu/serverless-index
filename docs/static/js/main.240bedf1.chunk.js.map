{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getInitialState","providers","undefined","services","load_failed","selectedProviders","selectedTags","search","state","loadData","_this2","fetch","then","response","ok","json","setState","data","sort","a","b","name","tags","_this3","_this$state","length","keys","filter","s","toLowerCase","includes","some","t","provider","every","st","flatten","react_default","createElement","className","id","App_TextField","onChange","value","App_CheckList","selectedValues","objects","map","k","key","App_MultiSearch","searchOptions","App_ServiceTable","loading","result","i","concat","toConsumableArray","Component","TextField","_this4","event","target","htmlFor","type","bind","CheckList","_this5","stateMap","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","values","_event$target","checked","prop","push","_this6","_this$props","o","MultiSearch","_this7","searches","_this$state2","_this8","_this$props2","so","onKeyDown","list","onClick","removeSearch","ServiceTable","_this$props3","renderItem","item","href","url","tag","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.240bedf1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.getInitialState();\n        this.loadData();\n    }\n\n    getInitialState = () => ({\n        providers: undefined,\n        services: undefined,\n        load_failed: false,\n        selectedProviders: [],\n        selectedTags: [],\n        search: ''\n    });\n\n    loadData() {\n        fetch('/data.json').then(response => {\n            if (response.ok) {\n                return response.json();\n            } else {\n                this.setState({load_failed: true});\n            }\n        }).then(data => {\n            this.setState({\n                providers: data.providers,\n                services: data.services.sort((a, b) => a.name - b.name),\n                tags: data.tags\n            });\n        });\n    }\n\n\n    render() {\n        const {providers, load_failed, search} = this.state;\n        let selectedProviders = this.state.selectedProviders;\n\n        if (selectedProviders.length === 0) {\n            selectedProviders = providers ? Object.keys(providers) : [];\n        }\n\n        let selectedTags = this.state.selectedTags;\n        if (selectedTags.length === 0) {\n            selectedTags = undefined;\n        }\n\n        let services = this.state.services;\n\n        services = services ? services.filter(s =>\n            (s.name.toLowerCase().includes(search.toLowerCase()) || s.tags.some(t => t.toLowerCase().includes(search.toLowerCase())))\n            && selectedProviders.includes(s.provider) && (selectedTags ? selectedTags.every(st => s.tags.some(t => t.toLowerCase().includes(st.toLowerCase()))) : true)\n        ) : undefined;\n\n        let tags = this.state.tags;\n        tags = App.flatten(tags);\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>Serverless Index</h1>\n                </header>\n                <main>\n                    {load_failed ? <p className={'error'}>Failed to load data</p> : ''}\n                    <div>\n                        <h2>Search</h2>\n                        <div id={'search'}>\n                            <TextField name={'By name'} onChange={(value) => this.setState({\n                                search: value\n                            })}/>\n                            {providers ? <CheckList name={'By provider'} onChange={(selectedValues) => this.setState({\n                                selectedProviders: selectedValues\n                            })} objects={Object.keys(providers).map(k => ({key: k, value: providers[k].name}))}/> : ''}\n                            <MultiSearch name={'By tag'} onChange={tags => this.setState({selectedTags: tags})} searchOptions={tags}/>\n                        </div>\n                    </div>\n                    <ServiceTable loading={!services} services={services} providers={providers}/>\n                </main>\n            </div>\n        );\n    }\n\n    static flatten(tags) {\n        let result = [];\n        for (const i in tags) {\n            result = [...result, ...tags[i]];\n        }\n        return result;\n    }\n}\n\nclass TextField extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.getInitialState();\n    }\n\n    getInitialState = () => ({\n        value: ''\n    });\n\n    onChange(event) {\n        const data = event.target.value;\n        this.setState({value: data});\n        if (this.props.onChange) {\n            this.props.onChange(data);\n        }\n    }\n\n    render() {\n        const {name} = this.props;\n        return (\n            <div className={'input-container'}>\n                <label className={'main'} htmlFor={name}>{name}</label>\n                <input id={name} type={'text'} onChange={this.onChange.bind(this)}/>\n            </div>\n        );\n    }\n}\n\nTextField.propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired\n};\n\nclass CheckList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.getInitialState();\n    }\n\n    getInitialState = () => {\n        const {objects} = this.props;\n        const stateMap = {};\n        for (const object of objects) {\n            stateMap[object.key] = false;\n        }\n        return {values: stateMap};\n    };\n\n    onChange(event) {\n        const {target: {checked, value}} = event;\n        const {values} = this.state;\n        values[value] = checked;\n        this.setState({values: values});\n        const selectedValues = [];\n        for (const prop in values) {\n            if (values[prop]) {\n                selectedValues.push(prop);\n            }\n        }\n        this.props.onChange(selectedValues);\n    }\n\n    render() {\n        const {name, objects} = this.props;\n        return (\n            <div>\n                <label className={'main'}>{name}</label>\n                {objects.map(o => (\n                    <div key={o.key}>\n                        <input id={o.key} type={'checkbox'} value={o.key} checked={this.state.values[o.key]} onChange={this.onChange.bind(this)}/>\n                        <label htmlFor={o.key}>{o.value}</label>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n}\n\nCheckList.propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    objects: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nclass MultiSearch extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.getInitialState();\n    }\n\n    getInitialState = () => ({\n        search: '',\n        searches: []\n    });\n\n    onChange(event) {\n        const {target: {value}} = event;\n        this.setState({search: value});\n    }\n\n    onKeyDown(event) {\n        const {key} = event;\n        if (key === 'Enter') {\n            const {searches, search} = this.state;\n            if (!searches.includes(search) && search !== '') {\n                searches.push(search);\n                this.setState({search: '', searches: searches});\n                this.props.onChange(searches);\n            } else {\n                this.setState({search: ''});\n            }\n        }\n    }\n\n    removeSearch(search) {\n        let {searches} = this.state;\n        searches = searches.filter(s => s !== search);\n        this.setState({searches: searches});\n        this.props.onChange(searches);\n    }\n\n    render() {\n        const {searchOptions, name} = this.props;\n        return (\n            <div className={'input-container multi-search'}>\n                <label className={'main'} htmlFor={name}>{name}</label>\n                {searchOptions ?\n                    <datalist id={'search-data-' + name}>\n                        {searchOptions.map(so => <option key={so} value={so}/>)}\n                    </datalist>\n                    : ''}\n                <input type={'search'} id={name} value={this.state.search} onChange={this.onChange.bind(this)} onKeyDown={this.onKeyDown.bind(this)} list={'search-data-' + name}/>\n                <div className={'searches'}>\n                    {this.state.searches.map(s => <span key={s} className={'search-item'}>{s}\n                        <button onClick={this.removeSearch.bind(this, s)}>&times;</button></span>)}\n                </div>\n            </div>\n        );\n    }\n}\n\nMultiSearch.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    searchOptions: PropTypes.arrayOf(PropTypes.string),\n    name: PropTypes.string.isRequired\n};\n\nclass ServiceTable extends Component {\n    render() {\n        const {services, loading} = this.props;\n        return loading ?\n            (<p>Loading</p>) :\n            (<div id={'services'}>{services ? services.map(this.renderItem.bind(this)) : (\n                <p className={'error'}>Invalid state (not loading but no services)</p>)}</div>);\n    }\n\n    renderItem(item) {\n        const provider = this.props.providers[item.provider];\n        return (\n            <div key={item.name}>\n                <a href={item.url} target={'_blank'}>{item.name}</a>\n                <a href={provider.url} target={'_blank'}>{provider.name}</a>\n                <div className={'tags'}>\n                    {item.tags.map(tag => (<span key={tag}>{tag}</span>))}\n                </div>\n            </div>\n        );\n    }\n}\n\nServiceTable.propTypes = {\n    services: PropTypes.arrayOf(PropTypes.object),\n    loading: PropTypes.bool\n};\n\nclass CollapsibleElement extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.getInitialState();\n    }\n\n    getInitialState = () => ({\n        collapsed: false\n    });\n\n    toggleCollapse() {\n        this.setState({collapsed: !this.state.collapsed});\n    }\n\n    render() {\n        return (\n            <div>\n                <button className={'collapsed-button'} onClick={this.toggleCollapse.bind(this)}>\n                    {this.state.collapsed ? <span>&#9656;</span> : <span>&#9662;</span>}\n                    {this.props.titleElement}</button>\n                {!this.state.collapsed ? this.props.children : ''}\n            </div>\n        );\n    }\n}\n\nCollapsibleElement.propTypes = {\n    titleElement: PropTypes.element.isRequired,\n    children: PropTypes.element.isRequired\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}